name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  MONGODB_URI: mongodb://localhost:27017
  tf_version: '1.9.5'
  tg_version: '0.67.0'

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      mongodb:
        image: mongo:latest
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.stats()'" 
          --health-interval=10s 
          --health-timeout=5s 
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Install dependencies
        run: go mod tidy
        working-directory: ./src

      - name: Run tests
        run: go test ./...
        working-directory: ./src

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/pixelpet:latest .

      - name: Push Docker image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/pixelpet:latest

  deploy:
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      # Add steps to:
      # - Configure cloud credentials
      # - Deploy infrastructure
      # - Deploy application
      # - Run health checks
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-3

      - name: Init
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: infra/terraform
          tg_command: 'run-all init'
        working-directory: ./infra/terraform

      - name: Validate
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: infra/terraform
          tg_command: 'run-all validate'
        working-directory: ./infra/terraform

      - name: Plan
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: infra/terraform
          tg_command: 'run-all plan'
        working-directory: ./infra/terraform

      - name: Apply
        uses: gruntwork-io/terragrunt-action@v2
        if: github.ref == 'refs/heads/main'
        with:
          tf_version: ${{ env.tf_version }}
          tg_version: ${{ env.tg_version }}
          tg_dir: infra/terraform
          tg_command: 'run-all apply --auto-approve'
        working-directory: ./infra/terraform
